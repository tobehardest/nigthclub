// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	chat "nightclub/nightclub/internal/handler/chat"
	common "nightclub/nightclub/internal/handler/common"
	merchant "nightclub/nightclub/internal/handler/merchant"
	message "nightclub/nightclub/internal/handler/message"
	order "nightclub/nightclub/internal/handler/order"
	payment "nightclub/nightclub/internal/handler/payment"
	user "nightclub/nightclub/internal/handler/user"
	wechat "nightclub/nightclub/internal/handler/wechat"
	"nightclub/nightclub/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/get_phone_number",
				Handler: wechat.GetUserPhoneHandler(serverCtx),
			},
		},
		rest.WithPrefix("/wechat/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/user/register",
				Handler: user.UserRegisterHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/login",
				Handler: user.UserLoginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/generate_token",
				Handler: user.GenerateTokenHandler(serverCtx),
			},
		},
		rest.WithPrefix("/usercenter/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/user/info",
				Handler: user.GetUserInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/update/user_name",
				Handler: user.UpdateUserNameHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/update/avatar",
				Handler: user.UpdateAvatarHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/update/feature",
				Handler: user.UpdateFeatureHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/update/location",
				Handler: user.UpdateUserLocationHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/update/wechat_id",
				Handler: user.UpdateWechatIdHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/select/onlineuser",
				Handler: user.OnlineUsersHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/select/wechatId",
				Handler: user.GetUserWechatIdHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/select/avatar/:file",
				Handler: user.GetUserAvatarHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/to/shop",
				Handler: user.UserToShopHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/usercenter/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/send/message/pat",
				Handler: message.SendPatMessageHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/send/message/gift",
				Handler: message.SendGiftMessageHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/get/message_list",
				Handler: message.GetMessageListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/get/has/send/gift",
				Handler: message.GetHasSendGiftMessageHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/get/has/new/message",
				Handler: message.GetHasNewMessageHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/get/has/new/gift/bc",
				Handler: message.GetHasNewGiftBCHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/message/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/send/friend/chat",
				Handler: chat.SendChatToFriendHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/get/has/new/friend/chat",
				Handler: chat.GetHasNewFriendChatHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/get/friend/chat_list",
				Handler: chat.GetFriendChatListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/get/user/chat_list",
				Handler: chat.GetUserChatListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/get/has/new/user/chat",
				Handler: chat.GetHasNewUserChatHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/chat/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/add/Room",
				Handler: merchant.AddRoomHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/add/merchant",
				Handler: merchant.AddMerchantHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/merchant/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/get/special_effect/:specialEffectId",
				Handler: common.GetSpecialEffectHandler(serverCtx),
			},
		},
		rest.WithPrefix("/common/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/sendGiftOrder/creatSendGiftOrder",
				Handler: order.CreatSendGiftOrderHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/order/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/thirdPayment/thirdPaymentWxPayCallback",
				Handler: payment.ThirdPaymentWxPayCallbackHandler(serverCtx),
			},
		},
		rest.WithPrefix("/payment/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/thirdPayment/thirdPaymentWxPay",
				Handler: payment.ThirdPaymentwxPayHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/thirdPayment/thirdPaymentWxPayQuery",
				Handler: payment.ThirdPaymentwxQueryPayHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/payment/v1"),
	)
}
